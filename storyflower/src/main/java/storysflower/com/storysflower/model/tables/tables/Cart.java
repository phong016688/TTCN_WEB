/*
 * This file is generated by jOOQ.
 */
package storysflower.com.storysflower.model.tables.tables;


import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import storysflower.com.storysflower.model.tables.Indexes;
import storysflower.com.storysflower.model.tables.Keys;
import storysflower.com.storysflower.model.tables.Public;
import storysflower.com.storysflower.model.tables.tables.records.CartRecord;


/**
 * cart table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cart extends TableImpl<CartRecord> {

    private static final long serialVersionUID = -1514336090;

    /**
     * The reference instance of <code>public.cart</code>
     */
    public static final Cart CART = new Cart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CartRecord> getRecordType() {
        return CartRecord.class;
    }

    /**
     * The column <code>public.cart.id</code>.
     */
    public final TableField<CartRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('cart_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.cart.user_id</code>.
     */
    public final TableField<CartRecord, Long> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.cart.customer_id</code>.
     */
    public final TableField<CartRecord, Long> CUSTOMER_ID = createField("customer_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.cart.recipient_id</code>.
     */
    public final TableField<CartRecord, Long> RECIPIENT_ID = createField("recipient_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.cart.buy_date</code>.
     */
    public final TableField<CartRecord, Timestamp> BUY_DATE = createField("buy_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.cart.delivery_date</code>.
     */
    public final TableField<CartRecord, Date> DELIVERY_DATE = createField("delivery_date", org.jooq.impl.SQLDataType.DATE.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_DATE", org.jooq.impl.SQLDataType.DATE)), this, "");

    /**
     * The column <code>public.cart.delivery_hour</code>.
     */
    public final TableField<CartRecord, Time> DELIVERY_HOUR = createField("delivery_hour", org.jooq.impl.SQLDataType.TIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIME", org.jooq.impl.SQLDataType.TIME)), this, "");

    /**
     * The column <code>public.cart.status</code>.
     */
    public final TableField<CartRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.cart</code> table reference
     */
    public Cart() {
        this(DSL.name("cart"), null);
    }

    /**
     * Create an aliased <code>public.cart</code> table reference
     */
    public Cart(String alias) {
        this(DSL.name(alias), CART);
    }

    /**
     * Create an aliased <code>public.cart</code> table reference
     */
    public Cart(Name alias) {
        this(alias, CART);
    }

    private Cart(Name alias, Table<CartRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cart(Name alias, Table<CartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("cart table"));
    }

    public <O extends Record> Cart(Table<O> child, ForeignKey<O, CartRecord> key) {
        super(child, key, CART);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CART_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CartRecord, Long> getIdentity() {
        return Keys.IDENTITY_CART;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CartRecord> getPrimaryKey() {
        return Keys.CART_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CartRecord>> getKeys() {
        return Arrays.<UniqueKey<CartRecord>>asList(Keys.CART_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CartRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CartRecord, ?>>asList(Keys.CART__FK_CART_CUSTOMER, Keys.CART__FK_CART_RECIPIENT);
    }

    public Customer customer() {
        return new Customer(this, Keys.CART__FK_CART_CUSTOMER);
    }

    public Recipient recipient() {
        return new Recipient(this, Keys.CART__FK_CART_RECIPIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cart as(String alias) {
        return new Cart(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cart as(Name alias) {
        return new Cart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cart rename(String name) {
        return new Cart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cart rename(Name name) {
        return new Cart(name, null);
    }
}
