/*
 * This file is generated by jOOQ.
 */
package storysflower.com.storysflower.model.tables.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import storysflower.com.storysflower.model.tables.Indexes;
import storysflower.com.storysflower.model.tables.Keys;
import storysflower.com.storysflower.model.tables.Public;
import storysflower.com.storysflower.model.tables.tables.records.OccasionRecord;


/**
 * occasion table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Occasion extends TableImpl<OccasionRecord> {

    private static final long serialVersionUID = 939738358;

    /**
     * The reference instance of <code>public.occasion</code>
     */
    public static final Occasion OCCASION = new Occasion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OccasionRecord> getRecordType() {
        return OccasionRecord.class;
    }

    /**
     * The column <code>public.occasion.occasion_id</code>.
     */
    public final TableField<OccasionRecord, Long> OCCASION_ID = createField("occasion_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('occasion_occasion_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.occasion.name_occasion</code>.
     */
    public final TableField<OccasionRecord, String> NAME_OCCASION = createField("name_occasion", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.occasion.image_id</code>.
     */
    public final TableField<OccasionRecord, Long> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.occasion</code> table reference
     */
    public Occasion() {
        this(DSL.name("occasion"), null);
    }

    /**
     * Create an aliased <code>public.occasion</code> table reference
     */
    public Occasion(String alias) {
        this(DSL.name(alias), OCCASION);
    }

    /**
     * Create an aliased <code>public.occasion</code> table reference
     */
    public Occasion(Name alias) {
        this(alias, OCCASION);
    }

    private Occasion(Name alias, Table<OccasionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Occasion(Name alias, Table<OccasionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("occasion table"));
    }

    public <O extends Record> Occasion(Table<O> child, ForeignKey<O, OccasionRecord> key) {
        super(child, key, OCCASION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.OCCASION_NAME_OCCASION_KEY, Indexes.OCCASION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OccasionRecord, Long> getIdentity() {
        return Keys.IDENTITY_OCCASION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OccasionRecord> getPrimaryKey() {
        return Keys.OCCASION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OccasionRecord>> getKeys() {
        return Arrays.<UniqueKey<OccasionRecord>>asList(Keys.OCCASION_PKEY, Keys.OCCASION_NAME_OCCASION_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OccasionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OccasionRecord, ?>>asList(Keys.OCCASION__FK_OCCASION_IMAGE);
    }

    public Image image() {
        return new Image(this, Keys.OCCASION__FK_OCCASION_IMAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Occasion as(String alias) {
        return new Occasion(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Occasion as(Name alias) {
        return new Occasion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Occasion rename(String name) {
        return new Occasion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Occasion rename(Name name) {
        return new Occasion(name, null);
    }
}
