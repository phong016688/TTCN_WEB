/*
 * This file is generated by jOOQ.
 */
package storysflower.com.storysflower.model.tables.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import storysflower.com.storysflower.model.tables.Keys;
import storysflower.com.storysflower.model.tables.Public;
import storysflower.com.storysflower.model.tables.tables.records.ProductCategoryRecord;


/**
 * product category table
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductCategory extends TableImpl<ProductCategoryRecord> {

    private static final long serialVersionUID = -858197919;

    /**
     * The reference instance of <code>public.product_category</code>
     */
    public static final ProductCategory PRODUCT_CATEGORY = new ProductCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCategoryRecord> getRecordType() {
        return ProductCategoryRecord.class;
    }

    /**
     * The column <code>public.product_category.product_id</code>.
     */
    public final TableField<ProductCategoryRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.product_category.category_id</code>.
     */
    public final TableField<ProductCategoryRecord, Long> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.product_category</code> table reference
     */
    public ProductCategory() {
        this(DSL.name("product_category"), null);
    }

    /**
     * Create an aliased <code>public.product_category</code> table reference
     */
    public ProductCategory(String alias) {
        this(DSL.name(alias), PRODUCT_CATEGORY);
    }

    /**
     * Create an aliased <code>public.product_category</code> table reference
     */
    public ProductCategory(Name alias) {
        this(alias, PRODUCT_CATEGORY);
    }

    private ProductCategory(Name alias, Table<ProductCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductCategory(Name alias, Table<ProductCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("product category table"));
    }

    public <O extends Record> ProductCategory(Table<O> child, ForeignKey<O, ProductCategoryRecord> key) {
        super(child, key, PRODUCT_CATEGORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProductCategoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductCategoryRecord, ?>>asList(Keys.PRODUCT_CATEGORY__FK_CATEGORY_PRODUCT_PRODUCT, Keys.PRODUCT_CATEGORY__FK_CATEGORY_PRODUCT_CATEGORY);
    }

    public Product product() {
        return new Product(this, Keys.PRODUCT_CATEGORY__FK_CATEGORY_PRODUCT_PRODUCT);
    }

    public Category category() {
        return new Category(this, Keys.PRODUCT_CATEGORY__FK_CATEGORY_PRODUCT_CATEGORY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCategory as(String alias) {
        return new ProductCategory(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCategory as(Name alias) {
        return new ProductCategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCategory rename(String name) {
        return new ProductCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCategory rename(Name name) {
        return new ProductCategory(name, null);
    }
}
